inaddy@workstation:~/work/sources$ readelf --wide --file-header /bin/true  ; readelf --wide --program-headers /bin/true ; readelf --wide --section-headers /bin/true
ELF Header:
 Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
 Class:                             ELF64
 Data:                              2's complement, little endian
 Version:                           1 (current)
 OS/ABI:                            UNIX - System V
 ABI Version:                       0
 Type:                              DYN (Shared object file)
 Machine:                           Advanced Micro Devices X86-64
 Version:                           0x1
 Entry point address:               0x2390
 Start of program headers:          64 (bytes into file)
 Start of section headers:          33568 (bytes into file)
 Flags:                             0x0
 Size of this header:               64 (bytes)
 Size of program headers:           56 (bytes)
 Number of program headers:         11
 Size of section headers:           64 (bytes)
 Number of section headers:         29
 Section header string table index: 28


Elf file type is DYN (Shared object file)
Entry point 0x2390
There are 11 program headers, starting at offset 64


Program Headers:
 Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
 PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x000268 0x000268 R   0x8
 INTERP         0x0002a8 0x00000000000002a8 0x00000000000002a8 0x00001c 0x00001c R   0x1
     [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
 LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x001148 0x001148 R   0x1000
 LOAD           0x002000 0x0000000000002000 0x0000000000002000 0x0032d9 0x0032d9 R E 0x1000
 LOAD           0x006000 0x0000000000006000 0x0000000000006000 0x001b60 0x001b60 R   0x1000
 LOAD           0x007d90 0x0000000000008d90 0x0000000000008d90 0x000450 0x0005e8 RW  0x1000
 DYNAMIC        0x007df8 0x0000000000008df8 0x0000000000008df8 0x0001e0 0x0001e0 RW  0x8
 NOTE           0x0002c4 0x00000000000002c4 0x00000000000002c4 0x000044 0x000044 R   0x4
 GNU_EH_FRAME   0x006dd0 0x0000000000006dd0 0x0000000000006dd0 0x00026c 0x00026c R   0x4
 GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10
 GNU_RELRO      0x007d90 0x0000000000008d90 0x0000000000008d90 0x000270 0x000270 R   0x1


Section to Segment mapping:
 Segment Sections...
  00    
  01     .interp
  02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt
  03     .init .plt .plt.got .text .fini
  04     .rodata .eh_frame_hdr .eh_frame
  05     .init_array .fini_array .data.rel.ro .dynamic .got .got.plt .data .bss
  06     .dynamic
  07     .note.ABI-tag .note.gnu.build-id
  08     .eh_frame_hdr
  09    
  10     .init_array .fini_array .data.rel.ro .dynamic .got
There are 29 section headers, starting at offset 0x8320:


Section Headers:
 [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
 [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
 [ 1] .interp           PROGBITS        00000000000002a8 0002a8 00001c 00   A  0   0  1
 [ 2] .note.ABI-tag     NOTE            00000000000002c4 0002c4 000020 00   A  0   0  4
 [ 3] .note.gnu.build-id NOTE            00000000000002e4 0002e4 000024 00   A  0   0  4
 [ 4] .gnu.hash         GNU_HASH        0000000000000308 000308 000040 00   A  5   0  8
 [ 5] .dynsym           DYNSYM          0000000000000348 000348 0004c8 18   A  6   1  8
 [ 6] .dynstr           STRTAB          0000000000000810 000810 00026c 00   A  0   0  1
 [ 7] .gnu.version      VERSYM          0000000000000a7c 000a7c 000066 02   A  5   0  2
 [ 8] .gnu.version_r    VERNEED         0000000000000ae8 000ae8 000060 00   A  6   1  8
 [ 9] .rela.dyn         RELA            0000000000000b48 000b48 000258 18   A  5   0  8
 [10] .rela.plt         RELA            0000000000000da0 000da0 0003a8 18  AI  5  24  8
 [11] .init             PROGBITS        0000000000002000 002000 000017 00  AX  0   0  4
 [12] .plt              PROGBITS        0000000000002020 002020 000280 10  AX  0   0 16
 [13] .plt.got          PROGBITS        00000000000022a0 0022a0 000008 08  AX  0   0  8
 [14] .text             PROGBITS        00000000000022b0 0022b0 00301e 00  AX  0   0 16
 [15] .fini             PROGBITS        00000000000052d0 0052d0 000009 00  AX  0   0  4
 [16] .rodata           PROGBITS        0000000000006000 006000 000dce 00   A  0   0 32
 [17] .eh_frame_hdr     PROGBITS        0000000000006dd0 006dd0 00026c 00   A  0   0  4
 [18] .eh_frame         PROGBITS        0000000000007040 007040 000b20 00   A  0   0  8
 [19] .init_array       INIT_ARRAY      0000000000008d90 007d90 000008 08  WA  0   0  8
 [20] .fini_array       FINI_ARRAY      0000000000008d98 007d98 000008 08  WA  0   0  8
 [21] .data.rel.ro      PROGBITS        0000000000008da0 007da0 000058 00  WA  0   0 32
 [22] .dynamic          DYNAMIC         0000000000008df8 007df8 0001e0 10  WA  6   0  8
 [23] .got              PROGBITS        0000000000008fd8 007fd8 000028 08  WA  0   0  8
 [24] .got.plt          PROGBITS        0000000000009000 008000 000150 08  WA  0   0  8
 [25] .data             PROGBITS        0000000000009160 008160 000080 00  WA  0   0 32
 [26] .bss              NOBITS          00000000000091e0 0081e0 000198 00  WA  0   0 32
 [27] .gnu_debuglink    PROGBITS        0000000000000000 0081e0 000034 00      0   0  4
 [28] .shstrtab         STRTAB          0000000000000000 008214 00010a 00      0   0  1
Key to Flags:
 W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
 L (link order), O (extra OS processing required), G (group), T (TLS),
 C (compressed), x (unknown), o (OS specific), E (exclude),
 l (large), p (processor specific)

