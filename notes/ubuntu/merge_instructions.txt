https://wiki.ubuntu.com/ServerTeam/KnowledgeBase
https://wiki.ubuntu.com/ServerTeam/KnowledgeBase#Merge_Proposals_and_Reviewing
https://wiki.ubuntu.com/UbuntuDevelopment/Merging/GitWorkflow

----

1) obtain the git tree

2) split current ubuntu delta into logical commits

2.1) cd <source>

2.2) git ubuntu merge --bug XXXX start ubuntu/devel

2.2.1) will create debian/sid branch tracking importer/debian/sid

2.2.2) will create 3 tags:

    a) old/ubuntu    => ubuntu/devel (current)
    b) old/debian    => ubuntu/devel & debian/devel (last debian version merged)
    c) new/debian    => debian/sid (version to be merged with, latest unstable)

2.3) git rebase -i lpXXXX/old/debian

    2.3.1) rebase reconstructed ubuntu delta and edit each cherry-pick commit
    2.3.2) commits: Imported version <version> to <distribution>/<series>... -> edit
    2.3.3) commits that are already logical changes: pick (unmodified)
    2.3.4) copies of same version between pockets/releases: line commented out -> leave
    2.3.5) git rebase will stop at every commit
    2.3.6) for each logical change listed in "git diff - debian/changelog":
            a) git add -i    => stage a commit for a change
            b) git commit    => commit the staged changes using changelog entry as log msg
            c) commit changes not put into debian/changelog, one commit for each
    2.3.7) remaining changes are ONLY debian/changelog and debian/control
            a) verify: "git diff -p" and "git diff"
            b) commit debian/changelog with commit log: "changelog"
            c) commit debian/control metadata with log: "update-metadata"
    2.3.8) result at the end: no modifications are lost or gained
            a) "git diff"    => should report nothing
            b) git rebase ---continue => repeat steps for the next published Ubuntu version

2.4) git ubuntu tag --split --bug XXXX

    2.4.1) tags final commit for easy reference and review

2.5) git rebase -i lpXXX/old/debian (AGAIN)

    2.5.1) interactively rebase ubuntu delta dropping changelog and update-metadata
    2.5.2) idea is to consolidate the delta:
    a) a patch added in one released and dropped in another can be dropped
    b) patches could be merged if a patch is changing another patches behaviour
    2.5.3) final commit is a broken-out history for the latest ubuntu version
    a) without logs and metadata changes
    b) verify it: git diff -p old/ubuntu => only diff is changelog and metadata

2.6) git ubuntu tag --logical --bug XXXX

    2.6.1) tag this commit for easy reference and review
    2.6.2) it uses 'old/ubuntu' tag as reference to use in the tag name
        git show lpxxxx/split/...
        copy and paste the text
        https://github.com/kstenerud/ubuntu-maintainers-handbook/blob/master/PackageMerging.md#create-logical-tag-manually
        git tag -a -m "Logical delta of 3.1.20-3.1ubuntu2" lp1802914/logical/3.1.20-3.1ubuntu2

3) git rebase --onto new/debian old/debian HEAD

    3.1) replay the logical delta onto latest Debian release
    3.2) individual logical changes (quilt patches) might no longer apply
        a) edit/change the logical changes commit
        b) source contains old patch (upstream):
            - important to document dropping the logical changes
            - use git commit --allow-empty (Dropped changes and why)

4) build/test

5) git ubuntu merge --bug XXXX finish ubuntu/devel

    5.1) verify we started a merge from new/debian
    5.2) reconstruct debian/changelog for new version
        5.2.1) git-ubuntu.mergechangelogs old/debian old/ubuntu new/debian
        5.2.2) git commit -m 'merge-changelogs' debian/changelog
        5.2.3) git reconstruct-changelog new/debian
        5.2.4) git commit -m 'reconstruct-changelog' debian/changelog
    5.3) update metadata for new version
        5.3.1) update-maintainer
        5.3.2) git commit -m 'update-maintainer' debian/control

6) check debian/changelog if they are sufficient for an upload

7) consider some clean-up and check open bugs:
   https://bugs.launchpad.net/ubuntu/+source/<name>

8) make ready for push and review:
    8.1) git checkout -b merge
    8.2) git ubuntu lint

9) push and review
    9.1) pushing git ubuntu is still WIP
    9.2) push to: git+ssh://yourusername@git.launchpad.net/~yourusername/ubuntu/+source/<name>
    9.3) go to: ~usd-import-team/ubuntu/+source/<yourpackage>
    9.4) as target use: debian/sid

10) git ubuntu tag --upload

    10.1) git ubuntu tag --upload

    10.2) git push pkg upload/<version>

        pkg is the remote provided by git ubuntu mapping to:
        ssh://<LPuser>@git.launchpad.net/~usd-import-team/ubuntu/+source/<packagename>

10.3) importer picks up the new version and maps the rich history provided by upload tag to the new import it does
